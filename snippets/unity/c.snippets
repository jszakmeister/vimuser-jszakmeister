# DO NOT EDIT - file generated by corresponding .py file
snippet utfm "TEST_FAIL_MESSAGE(message)" b
TEST_FAIL_MESSAGE(${1:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utf "TEST_FAIL()" b
TEST_FAIL(${1:});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utim "TEST_IGNORE_MESSAGE(message)" b
TEST_IGNORE_MESSAGE(${1:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet uti "TEST_IGNORE()" b
TEST_IGNORE(${1:});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet uto "TEST_ONLY()" b
TEST_ONLY();
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet uta "TEST_ASSERT(condition)" b
TEST_ASSERT(${1:condition});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utat "TEST_ASSERT_TRUE(condition)" b
TEST_ASSERT_TRUE(${1:condition});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utau "TEST_ASSERT_UNLESS(condition)" b
TEST_ASSERT_UNLESS(${1:condition});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaf "TEST_ASSERT_FALSE(condition)" b
TEST_ASSERT_FALSE(${1:condition});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utan "TEST_ASSERT_NULL(pointer)" b
TEST_ASSERT_NULL(${1:pointer});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utann "TEST_ASSERT_NOT_NULL(pointer)" b
TEST_ASSERT_NOT_NULL(${1:pointer});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaei "TEST_ASSERT_EQUAL_INT(expected, actual)" b
TEST_ASSERT_EQUAL_INT(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaei8 "TEST_ASSERT_EQUAL_INT8(expected, actual)" b
TEST_ASSERT_EQUAL_INT8(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaei16 "TEST_ASSERT_EQUAL_INT16(expected, actual)" b
TEST_ASSERT_EQUAL_INT16(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaei32 "TEST_ASSERT_EQUAL_INT32(expected, actual)" b
TEST_ASSERT_EQUAL_INT32(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaei64 "TEST_ASSERT_EQUAL_INT64(expected, actual)" b
TEST_ASSERT_EQUAL_INT64(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utae "TEST_ASSERT_EQUAL(expected, actual)" b
TEST_ASSERT_EQUAL(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utane "TEST_ASSERT_NOT_EQUAL(expected, actual)" b
TEST_ASSERT_NOT_EQUAL(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeu "TEST_ASSERT_EQUAL_UINT(expected, actual)" b
TEST_ASSERT_EQUAL_UINT(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeu8 "TEST_ASSERT_EQUAL_UINT8(expected, actual)" b
TEST_ASSERT_EQUAL_UINT8(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeu16 "TEST_ASSERT_EQUAL_UINT16(expected, actual)" b
TEST_ASSERT_EQUAL_UINT16(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeu32 "TEST_ASSERT_EQUAL_UINT32(expected, actual)" b
TEST_ASSERT_EQUAL_UINT32(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeu64 "TEST_ASSERT_EQUAL_UINT64(expected, actual)" b
TEST_ASSERT_EQUAL_UINT64(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeh "TEST_ASSERT_EQUAL_HEX(expected, actual)" b
TEST_ASSERT_EQUAL_HEX(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeh8 "TEST_ASSERT_EQUAL_HEX8(expected, actual)" b
TEST_ASSERT_EQUAL_HEX8(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeh16 "TEST_ASSERT_EQUAL_HEX16(expected, actual)" b
TEST_ASSERT_EQUAL_HEX16(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeh32 "TEST_ASSERT_EQUAL_HEX32(expected, actual)" b
TEST_ASSERT_EQUAL_HEX32(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeh64 "TEST_ASSERT_EQUAL_HEX64(expected, actual)" b
TEST_ASSERT_EQUAL_HEX64(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utab "TEST_ASSERT_BITS(mask, expected, actual)" b
TEST_ASSERT_BITS(${1:mask}, ${2:expected}, ${3:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utabh "TEST_ASSERT_BITS_HIGH(mask, actual)" b
TEST_ASSERT_BITS_HIGH(${1:mask}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utabl "TEST_ASSERT_BITS_LOW(mask, actual)" b
TEST_ASSERT_BITS_LOW(${1:mask}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utabh "TEST_ASSERT_BIT_HIGH(bit, actual)" b
TEST_ASSERT_BIT_HIGH(${1:bit}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utabl "TEST_ASSERT_BIT_LOW(bit, actual)" b
TEST_ASSERT_BIT_LOW(${1:bit}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaiw "TEST_ASSERT_INT_WITHIN(delta, expected, actual)" b
TEST_ASSERT_INT_WITHIN(${1:delta}, ${2:expected}, ${3:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utauw "TEST_ASSERT_UINT_WITHIN(delta, expected, actual)" b
TEST_ASSERT_UINT_WITHIN(${1:delta}, ${2:expected}, ${3:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utahw "TEST_ASSERT_HEX_WITHIN(delta, expected, actual)" b
TEST_ASSERT_HEX_WITHIN(${1:delta}, ${2:expected}, ${3:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utah8w "TEST_ASSERT_HEX8_WITHIN(delta, expected, actual)" b
TEST_ASSERT_HEX8_WITHIN(${1:delta}, ${2:expected}, ${3:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utah16w "TEST_ASSERT_HEX16_WITHIN(delta, expected, actual)" b
TEST_ASSERT_HEX16_WITHIN(${1:delta}, ${2:expected}, ${3:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utah32w "TEST_ASSERT_HEX32_WITHIN(delta, expected, actual)" b
TEST_ASSERT_HEX32_WITHIN(${1:delta}, ${2:expected}, ${3:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utah64w "TEST_ASSERT_HEX64_WITHIN(delta, expected, actual)" b
TEST_ASSERT_HEX64_WITHIN(${1:delta}, ${2:expected}, ${3:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaep "TEST_ASSERT_EQUAL_PTR(expected, actual)" b
TEST_ASSERT_EQUAL_PTR(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaes "TEST_ASSERT_EQUAL_STRING(expected, actual)" b
TEST_ASSERT_EQUAL_STRING(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaem "TEST_ASSERT_EQUAL_MEMORY(expected, actual, len)" b
TEST_ASSERT_EQUAL_MEMORY(${1:expected}, ${2:actual}, ${3:len});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeia "TEST_ASSERT_EQUAL_INT_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_INT_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaei8a "TEST_ASSERT_EQUAL_INT8_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_INT8_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaei16a "TEST_ASSERT_EQUAL_INT16_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_INT16_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaei32a "TEST_ASSERT_EQUAL_INT32_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_INT32_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaei64a "TEST_ASSERT_EQUAL_INT64_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_INT64_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeua "TEST_ASSERT_EQUAL_UINT_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_UINT_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeu8a "TEST_ASSERT_EQUAL_UINT8_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_UINT8_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeu16a "TEST_ASSERT_EQUAL_UINT16_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_UINT16_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeu32a "TEST_ASSERT_EQUAL_UINT32_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_UINT32_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeu64a "TEST_ASSERT_EQUAL_UINT64_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_UINT64_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeha "TEST_ASSERT_EQUAL_HEX_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_HEX_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeh8a "TEST_ASSERT_EQUAL_HEX8_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_HEX8_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeh16a "TEST_ASSERT_EQUAL_HEX16_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_HEX16_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeh32a "TEST_ASSERT_EQUAL_HEX32_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_HEX32_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeh64a "TEST_ASSERT_EQUAL_HEX64_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_HEX64_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaepa "TEST_ASSERT_EQUAL_PTR_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_PTR_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaesa "TEST_ASSERT_EQUAL_STRING_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_STRING_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaema "TEST_ASSERT_EQUAL_MEMORY_ARRAY(expected, actual, len, num_elements)" b
TEST_ASSERT_EQUAL_MEMORY_ARRAY(${1:expected}, ${2:actual}, ${3:len}, ${4:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utafw "TEST_ASSERT_FLOAT_WITHIN(delta, expected, actual)" b
TEST_ASSERT_FLOAT_WITHIN(${1:delta}, ${2:expected}, ${3:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaef "TEST_ASSERT_EQUAL_FLOAT(expected, actual)" b
TEST_ASSERT_EQUAL_FLOAT(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaefa "TEST_ASSERT_EQUAL_FLOAT_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_FLOAT_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utafii "TEST_ASSERT_FLOAT_IS_INF(actual)" b
TEST_ASSERT_FLOAT_IS_INF(${1:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utafini "TEST_ASSERT_FLOAT_IS_NEG_INF(actual)" b
TEST_ASSERT_FLOAT_IS_NEG_INF(${1:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utafin "TEST_ASSERT_FLOAT_IS_NAN(actual)" b
TEST_ASSERT_FLOAT_IS_NAN(${1:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utadw "TEST_ASSERT_DOUBLE_WITHIN(delta, expected, actual)" b
TEST_ASSERT_DOUBLE_WITHIN(${1:delta}, ${2:expected}, ${3:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaed "TEST_ASSERT_EQUAL_DOUBLE(expected, actual)" b
TEST_ASSERT_EQUAL_DOUBLE(${1:expected}, ${2:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeda "TEST_ASSERT_EQUAL_DOUBLE_ARRAY(expected, actual, num_elements)" b
TEST_ASSERT_EQUAL_DOUBLE_ARRAY(${1:expected}, ${2:actual}, ${3:num_elements});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utadii "TEST_ASSERT_DOUBLE_IS_INF(actual)" b
TEST_ASSERT_DOUBLE_IS_INF(${1:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utadini "TEST_ASSERT_DOUBLE_IS_NEG_INF(actual)" b
TEST_ASSERT_DOUBLE_IS_NEG_INF(${1:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utadin "TEST_ASSERT_DOUBLE_IS_NAN(actual)" b
TEST_ASSERT_DOUBLE_IS_NAN(${1:actual});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utam "TEST_ASSERT_MESSAGE(condition, message)" b
TEST_ASSERT_MESSAGE(${1:condition}, ${2:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utatm "TEST_ASSERT_TRUE_MESSAGE(condition, message)" b
TEST_ASSERT_TRUE_MESSAGE(${1:condition}, ${2:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaum "TEST_ASSERT_UNLESS_MESSAGE(condition, message)" b
TEST_ASSERT_UNLESS_MESSAGE(${1:condition}, ${2:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utafm "TEST_ASSERT_FALSE_MESSAGE(condition, message)" b
TEST_ASSERT_FALSE_MESSAGE(${1:condition}, ${2:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utanm "TEST_ASSERT_NULL_MESSAGE(pointer, message)" b
TEST_ASSERT_NULL_MESSAGE(${1:pointer}, ${2:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utannm "TEST_ASSERT_NOT_NULL_MESSAGE(pointer, message)" b
TEST_ASSERT_NOT_NULL_MESSAGE(${1:pointer}, ${2:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeim "TEST_ASSERT_EQUAL_INT_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_INT_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaei8m "TEST_ASSERT_EQUAL_INT8_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_INT8_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaei16m "TEST_ASSERT_EQUAL_INT16_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_INT16_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaei32m "TEST_ASSERT_EQUAL_INT32_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_INT32_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaei64m "TEST_ASSERT_EQUAL_INT64_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_INT64_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaem "TEST_ASSERT_EQUAL_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utanem "TEST_ASSERT_NOT_EQUAL_MESSAGE(expected, actual, message)" b
TEST_ASSERT_NOT_EQUAL_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeum "TEST_ASSERT_EQUAL_UINT_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_UINT_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeu8m "TEST_ASSERT_EQUAL_UINT8_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_UINT8_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeu16m "TEST_ASSERT_EQUAL_UINT16_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_UINT16_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeu32m "TEST_ASSERT_EQUAL_UINT32_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_UINT32_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeu64m "TEST_ASSERT_EQUAL_UINT64_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_UINT64_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaehm "TEST_ASSERT_EQUAL_HEX_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_HEX_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeh8m "TEST_ASSERT_EQUAL_HEX8_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_HEX8_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeh16m "TEST_ASSERT_EQUAL_HEX16_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_HEX16_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeh32m "TEST_ASSERT_EQUAL_HEX32_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_HEX32_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeh64m "TEST_ASSERT_EQUAL_HEX64_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_HEX64_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utabm "TEST_ASSERT_BITS_MESSAGE(mask, expected, actual, message)" b
TEST_ASSERT_BITS_MESSAGE(${1:mask}, ${2:expected}, ${3:actual}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utabhm "TEST_ASSERT_BITS_HIGH_MESSAGE(mask, actual, message)" b
TEST_ASSERT_BITS_HIGH_MESSAGE(${1:mask}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utablm "TEST_ASSERT_BITS_LOW_MESSAGE(mask, actual, message)" b
TEST_ASSERT_BITS_LOW_MESSAGE(${1:mask}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utabhm "TEST_ASSERT_BIT_HIGH_MESSAGE(bit, actual, message)" b
TEST_ASSERT_BIT_HIGH_MESSAGE(${1:bit}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utablm "TEST_ASSERT_BIT_LOW_MESSAGE(bit, actual, message)" b
TEST_ASSERT_BIT_LOW_MESSAGE(${1:bit}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaiwm "TEST_ASSERT_INT_WITHIN_MESSAGE(delta, expected, actual, message)" b
TEST_ASSERT_INT_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utauwm "TEST_ASSERT_UINT_WITHIN_MESSAGE(delta, expected, actual, message)" b
TEST_ASSERT_UINT_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utahwm "TEST_ASSERT_HEX_WITHIN_MESSAGE(delta, expected, actual, message)" b
TEST_ASSERT_HEX_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utah8wm "TEST_ASSERT_HEX8_WITHIN_MESSAGE(delta, expected, actual, message)" b
TEST_ASSERT_HEX8_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utah16wm "TEST_ASSERT_HEX16_WITHIN_MESSAGE(delta, expected, actual, message)" b
TEST_ASSERT_HEX16_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utah32wm "TEST_ASSERT_HEX32_WITHIN_MESSAGE(delta, expected, actual, message)" b
TEST_ASSERT_HEX32_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utah64wm "TEST_ASSERT_HEX64_WITHIN_MESSAGE(delta, expected, actual, message)" b
TEST_ASSERT_HEX64_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaepm "TEST_ASSERT_EQUAL_PTR_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_PTR_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaesm "TEST_ASSERT_EQUAL_STRING_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_STRING_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaemm "TEST_ASSERT_EQUAL_MEMORY_MESSAGE(expected, actual, len, message)" b
TEST_ASSERT_EQUAL_MEMORY_MESSAGE(${1:expected}, ${2:actual}, ${3:len}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeiam "TEST_ASSERT_EQUAL_INT_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_INT_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaei8am "TEST_ASSERT_EQUAL_INT8_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_INT8_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaei16am "TEST_ASSERT_EQUAL_INT16_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_INT16_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaei32am "TEST_ASSERT_EQUAL_INT32_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_INT32_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaei64am "TEST_ASSERT_EQUAL_INT64_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_INT64_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeuam "TEST_ASSERT_EQUAL_UINT_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_UINT_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeu8am "TEST_ASSERT_EQUAL_UINT8_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_UINT8_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeu16am "TEST_ASSERT_EQUAL_UINT16_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_UINT16_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeu32am "TEST_ASSERT_EQUAL_UINT32_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_UINT32_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeu64am "TEST_ASSERT_EQUAL_UINT64_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_UINT64_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeham "TEST_ASSERT_EQUAL_HEX_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_HEX_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeh8am "TEST_ASSERT_EQUAL_HEX8_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_HEX8_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeh16am "TEST_ASSERT_EQUAL_HEX16_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_HEX16_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeh32am "TEST_ASSERT_EQUAL_HEX32_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_HEX32_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaeh64am "TEST_ASSERT_EQUAL_HEX64_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_HEX64_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaepam "TEST_ASSERT_EQUAL_PTR_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_PTR_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaesam "TEST_ASSERT_EQUAL_STRING_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_STRING_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaemam "TEST_ASSERT_EQUAL_MEMORY_ARRAY_MESSAGE(expected, actual, len, num_elements, message)" b
TEST_ASSERT_EQUAL_MEMORY_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:len}, ${4:num_elements}, ${5:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utafwm "TEST_ASSERT_FLOAT_WITHIN_MESSAGE(delta, expected, actual, message)" b
TEST_ASSERT_FLOAT_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaefm "TEST_ASSERT_EQUAL_FLOAT_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_FLOAT_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaefam "TEST_ASSERT_EQUAL_FLOAT_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_FLOAT_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utafiim "TEST_ASSERT_FLOAT_IS_INF_MESSAGE(actual, message)" b
TEST_ASSERT_FLOAT_IS_INF_MESSAGE(${1:actual}, ${2:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utafinim "TEST_ASSERT_FLOAT_IS_NEG_INF_MESSAGE(actual, message)" b
TEST_ASSERT_FLOAT_IS_NEG_INF_MESSAGE(${1:actual}, ${2:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utafinm "TEST_ASSERT_FLOAT_IS_NAN_MESSAGE(actual, message)" b
TEST_ASSERT_FLOAT_IS_NAN_MESSAGE(${1:actual}, ${2:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utadwm "TEST_ASSERT_DOUBLE_WITHIN_MESSAGE(delta, expected, actual, message)" b
TEST_ASSERT_DOUBLE_WITHIN_MESSAGE(${1:delta}, ${2:expected}, ${3:actual}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaedm "TEST_ASSERT_EQUAL_DOUBLE_MESSAGE(expected, actual, message)" b
TEST_ASSERT_EQUAL_DOUBLE_MESSAGE(${1:expected}, ${2:actual}, ${3:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utaedam "TEST_ASSERT_EQUAL_DOUBLE_ARRAY_MESSAGE(expected, actual, num_elements, message)" b
TEST_ASSERT_EQUAL_DOUBLE_ARRAY_MESSAGE(${1:expected}, ${2:actual}, ${3:num_elements}, ${4:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utadiim "TEST_ASSERT_DOUBLE_IS_INF_MESSAGE(actual, message)" b
TEST_ASSERT_DOUBLE_IS_INF_MESSAGE(${1:actual}, ${2:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utadinim "TEST_ASSERT_DOUBLE_IS_NEG_INF_MESSAGE(actual, message)" b
TEST_ASSERT_DOUBLE_IS_NEG_INF_MESSAGE(${1:actual}, ${2:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utadinm "TEST_ASSERT_DOUBLE_IS_NAN_MESSAGE(actual, message)" b
TEST_ASSERT_DOUBLE_IS_NAN_MESSAGE(${1:actual}, ${2:message});
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet usu "void setUp(void)" b
void
setUp(void)
{
    $0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utd "void tearDown(void)" b
void
tearDown(void)
{
    $0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utf "void test_...(void)" b
void
test_${1:name}(void)
{
    $0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet utfd "void test_...(void)" b
void
test_${1:name}(void);
endsnippet
