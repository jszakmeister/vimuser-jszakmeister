# DO NOT EDIT - file generated by corresponding .py file
snippet c "comment" b
(comment
  $0
  )
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet condp "condp" w
(condp ${1:pred} ${2:expr}
  $0)
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet defm "defmethod" b
(defmethod ${1:name} ${2:match}
  [${3:args}]
  $0)
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet defmm "defmulti" b
(defmulti ${1:name} ${2:dispatch-fn})
$0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet defn "defn" b
(defn ${1:name} ${2:
  "${3:doc-string}"
  }[${4:arg-list}]
  $0)
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet defp "defprotocol" b
(defprotocol ${1:Name}
  $0)
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet defr "defrecord" b
(defrecord ${1:Name} [${2:fields}]
  ${3:Protocol}
  $0)
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet deft "deftype" b
(deftype ${1:Name} [${2:fields}]
  ${3:Protocol}
  $0)
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet f "fresh" w
(fresh [${1:vars}]
  $0)
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet fn "fn" w
(fn [${1:arg-list}] $0)
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet if "if" w
(if ${1:test-expr}
  ${2:then-expr}
  ${3:else-expr})
$0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet import "import" b
(:import [${1:package}])
$0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet kwargs "keyword args" w
& {:keys [${1:keys}] :or {${2:defaults}}}
$0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet let "let" w
(let [$0])
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet letfn "letfn" w
(letfn [(${1:name) [${2:args}]
          $0)])
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet m "method" w
(${1:name} [${2:this} ${3:args}]
  $0)
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet ns "ns" b
(ns ${1:namespace}
  $0)
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet perf "perf" b
(dotimes [_ 10]
  (time
    (dotimes [_ ${1:times}]
      $0)))
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet pm "protocol method" b
(${1:name} [${2:this} ${3:args}])
$0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet refer "refer" w
(:refer-clojure :exclude [$0])
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet require "require" w
(:require [${1:namespace} :as [$0]])
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet rn "run n" w
(run ${1:n} [q]
  $0)
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet rstar "run*" w
(run* [q]
  $0)
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet use "use" w
(:use [${1:namespace} :only [$0]])
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet doseq "doseq" w
(doseq [${1:vars}]
  $0)
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet dotimes "dotimes " w
(dotimes [${1:vars}]
  $0)
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet main "-main" b
(defn -main
  "The application's main function"
  [& args]
  $0)
endsnippet
