# DO NOT EDIT - file generated by corresponding .py file
snippet template_python.snippets.py "new snippet template" bm
#!/usr/bin/env python
# vim:set fileencoding=utf8:

import os
import sys
import re
import setpypath

from sniputil import put

from sniputil import snip, bsnip, wsnip
from sniputil import abbr, babbr, wabbr

$0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet screrr "ScriptError" bm
class ScriptError(Exception):
    pass

$0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet se "ScriptError" bm
class ScriptError(Exception):
    pass

$0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet xrange "xrange" w
xrange($1)$0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet xr "xrange" w
xrange($1)$0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet rre "raise RuntimeError()" b
raise RuntimeError($1)$0
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet pst "print stack trace" b
import sys, traceback; traceback.print_stack(file=sys.stderr)
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet nose "from nose.tools import *" b
from nose.tools import *
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet gc "gc debug" b
import gc; gc.set_debug(gc.DEBUG_LEAK)
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet fr "from" w
from 
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet cli-sub "subcommand cli template" bm
import argparse
import sys

from pathlib import Path

from . import __version__ as VERSION


def add_common_options(parser):
    parser.add_argument(
        "--traceback",
        default=False,
        action="store_true",
        help="Print traceback of error.")
    parser.add_argument(
        "--version",
        action="version",
        version=VERSION)


def command_dummy(args):
    print("Temporary dummy command.")


def main():
    parser = argparse.ArgumentParser()

    add_common_options(parser)
    parser.set_defaults(command=lambda args: parser.print_help())

    subparsers = parser.add_subparsers()

    cmd = subparsers.add_parser(
        "dummy",
        help="Temporary dummy command.")

    add_common_options(cmd)

    cmd.set_defaults(command=command_dummy)

    args = parser.parse()

    try:
        args.command(args)
    except KeyboardInterrupt:
        pass
    except Exception as e:
        if args.traceback:
            raise

        print(f"ERROR: {e!s}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
endsnippet
