
global !p
from sniputil import betterVisual
endglobal
# DO NOT EDIT - file generated by corresponding .py file
snippet docstring "docstring for func or type" b!
/**
 *  ${1:Brief description.}
 *
 *  ${0:Full description.}
 */
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet doc "docstring for func or type" b!
/**
 *  ${1:Brief description.}
 *
 *  ${0:Full description.}
 */
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet /** "docstring for func or type" b!
/**
 *  ${1:Brief description.}
 *
 *  ${0:Full description.}
 */
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @param "@param inParam  @todo Description of ...." w
@param ${1:inParam}  ${0:@todo Description of $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @p "@param inParam  @todo Description of ...." w
@param ${1:inParam}  ${0:@todo Description of $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @pi "@param inParam  @todo Description of ...." w
@param ${1:inParam}  ${0:@todo Description of $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @po "@param inParam  @todo Description of ...." w
@param ${1:inParam}  ${0:@todo Description of $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @pio "@param inParam  @todo Description of ...." w
@param ${1:inParam}  ${0:@todo Description of $1.}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @return "@return " w
@return 
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @re "@return " w
@return 
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @ret "@return " w
@return 
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @retval "@return " w
@return 
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet @rv "@return " w
@return 
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet todo "/** @todo Description of what's TO DO. */" w
/** @todo ${1:Description of what's TO DO.} */
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet bug "/** @bug Description of BUG. */" w
/** @bug ${1:Description of BUG.} */
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet pl "System.out.println()" b!
System.out.println($1);
endsnippet

snippet printf "printf('...', ...);" w!
System.out.printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet pf "printf('...', ...);" w!
System.out.printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet err "printf('...', ...);" w!
System.err.printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

# DO NOT EDIT - file generated by corresponding .py file
snippet if "if (...) {...}" b
if ($1) {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet else "else {...}" w
else {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet el "else {...}" w
else {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet elif "else if (...) {...}" w
else if ($1) {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet ei "else if (...) {...}" w
else if ($1) {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet for "for (i = 0; i < N; i++) {...}" b
for (${1:i}${1/(.*;.*)|(.*=.*)|(.+)|.*/(?1::(?2:;:(?3: = 0;:;)))/} ${1/\s*[=;].*//}${2/(.*;.*)|(^[<>!=].*)|.*/(?1::(?2: : < ))/}${2:N}${2/(.*;.*)|.*/(?1::;)/} ${1/\s*[=;].*//}${3:${2/(^>.*)|.*/(?1:--:++)/}}) {
    `!p betterVisual(snip)`$0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet fore "for (each)" b
for ($1 : $2) {
    $0
}
endsnippet
# DO NOT EDIT - file generated by corresponding .py file
snippet template_java "template for a new java file" b
package ${1:name};

${2:public} class ${3:Name} {
    $0
}
endsnippet
